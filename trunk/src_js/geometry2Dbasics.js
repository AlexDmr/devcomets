//___________________________________________________________________________________________________________________________________________
//__________________________________________________________ Geometry 2D basics _____________________________________________________________
//___________________________________________________________________________________________________________________________________________
function Eq_second_degre(a, b, c) {
	var delta = b*b - 4*a*c;
	if(delta  < 0) {return [];}
	if(delta == 0) {return [-b/(2*a)];}
	set d = Math.sqrt(delta);
	return [(-b -d)/(2*a), (-b + d)/(2*a)];
}

//___________________________________________________________________________________________________________________________________________
//___________________________________________________________________________________________________________________________________________
//___________________________________________________________________________________________________________________________________________
function get_intersections_oval_line (cx, cy, rx, ry, x1, y1, x2, y2) {
	// Easy cases where there is no intersection
	if( x1 > cx+rx && x2 > cx + rx
	  ||x1 < cx-rx && x2 < cx - rx
	  ||y1 > cy+ry && y2 > cy + ry
	  ||y1 < cy-ry && y2 < cy - ry) {return [];}

	// There may be some intersections ...
	var rep = new Array();
	
	// Easy intersections with axe parrallele line
	if(x1 == x2) {
		 var a = 1;
		 var b = -2 * cy;
		 var c = (1 - (x1-cx)*(x1-cx)/rx) * ry - cy*cy;
		 var T_rep = Eq_second_degre(a, b, c);
		 for(var i = 0; i < T_rep.length; i++) {
			 if(T_rep[i] >= Math.min(y1, y2) && T_rep[i] <= Math.max(y1, y2)) {rep.push(x1, v);}
			}
		}

	if(y1 == y2) {
		 var a = 1;
		 var b = -2 * cx;
		 var c = (1 - (y1-cy)*(y1-cy)/ry) * rx - cx*cx;
		 var T_rep = Eq_second_degre(a, b, c);
		 for(var i = 0; i < T_rep.length; i++) {
			 if(T_rep[i] >= Math.min(y1, y2) && T_rep[i] <= Math.max(y1, y2)) {rep.push(v, y1);}
			}
		}
		
	// General case where the line can be expressed as y = ...
	if(x1!=x2 && y1!=y2) {
		 
		}
		
	// return the results as a list of coordinate <x, y, x, y, ...>
	return rep;
}

//___________________________________________________________________________________________________________________________________________
//___________________________________________________________________________________________________________________________________________
//___________________________________________________________________________________________________________________________________________
