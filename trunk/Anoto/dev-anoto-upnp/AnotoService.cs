using Intel.UPNP;

namespace Intel.DeviceBuilder
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class AnotoService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _AnotoService _S;
        public static string URN = "urn:schemas-upnp-org:Anoto::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(AnotoService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_page;
        public event OnStateVariableModifiedHandler OnStateVariableModified_x;
        public event OnStateVariableModifiedHandler OnStateVariableModified_y;
        public event OnStateVariableModifiedHandler OnStateVariableModified_force;
        public System.String Evented_page
        {
            get
            {
               return((System.String)_S.GetStateVariable("page"));
            }
            set
            {
               _S.SetStateVariable("page", value);
            }
        }
        public System.Int32 Evented_x
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("x"));
            }
            set
            {
               _S.SetStateVariable("x", value);
            }
        }
        public System.Int32 Evented_y
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("y"));
            }
            set
            {
               _S.SetStateVariable("y", value);
            }
        }
        public System.Int32 Evented_force
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("force"));
            }
            set
            {
               _S.SetStateVariable("force", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_page
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).Accumulator = value;
            }
        }
        public double ModerationDuration_page
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_x
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).Accumulator = value;
            }
        }
        public double ModerationDuration_x
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_y
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).Accumulator = value;
            }
        }
        public double ModerationDuration_y
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_force
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).Accumulator = value;
            }
        }
        public double ModerationDuration_force
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).ModerationPeriod = value;
            }
        }


        public void RemoveStateVariable_page()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("page"));
        }
        public void RemoveStateVariable_x()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("x"));
        }
        public void RemoveStateVariable_y()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("y"));
        }
        public void RemoveStateVariable_force()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("force"));
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _AnotoService
        {
            private AnotoService Outer = null;
            private UPnPService S;
            internal _AnotoService(AnotoService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[4];
                RetVal[0] = new UPnPModeratedStateVariable("page", typeof(System.String), true);
                RetVal[1] = new UPnPModeratedStateVariable("x", typeof(System.Int32), true);
                RetVal[2] = new UPnPModeratedStateVariable("y", typeof(System.Int32), true);
                RetVal[3] = new UPnPModeratedStateVariable("force", typeof(System.Int32), true);

                UPnPService S = new UPnPService(1, "", "urn:schemas-upnp-org:Anoto::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                return(S);
            }


        }
        public AnotoService()
        {
            _S = new _AnotoService(this);
            _S.GetUPnPService().GetStateVariableObject("page").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_page);
            _S.GetUPnPService().GetStateVariableObject("x").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_x);
            _S.GetUPnPService().GetStateVariableObject("y").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_y);
            _S.GetUPnPService().GetStateVariableObject("force").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_force);
        }
        public AnotoService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_page(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_page != null) OnStateVariableModified_page(this);
        }
        private void OnModifiedSink_x(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_x != null) OnStateVariableModified_x(this);
        }
        private void OnModifiedSink_y(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_y != null) OnStateVariableModified_y(this);
        }
        private void OnModifiedSink_force(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_force != null) OnStateVariableModified_force(this);
        }
        //}}}}} End of Code Block

        #endregion

    }
}