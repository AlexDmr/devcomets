using Intel.UPNP;

namespace Intel.DeviceBuilder
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class ImportedService : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _ImportedService _S;
        public static string URN = "urn:schemas-upnp-org:service::1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public delegate void OnStateVariableModifiedHandler(ImportedService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_page;
        public event OnStateVariableModifiedHandler OnStateVariableModified_x;
        public event OnStateVariableModifiedHandler OnStateVariableModified_y;
        public event OnStateVariableModifiedHandler OnStateVariableModified_tcpServer;
        public event OnStateVariableModifiedHandler OnStateVariableModified_serial;
        public event OnStateVariableModifiedHandler OnStateVariableModified_force;
        public System.String Evented_page
        {
            get
            {
               return((System.String)_S.GetStateVariable("page"));
            }
            set
            {
               _S.SetStateVariable("page", value);
            }
        }
        public System.Int32 Evented_x
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("x"));
            }
            set
            {
               _S.SetStateVariable("x", value);
            }
        }
        public System.Int32 Evented_y
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("y"));
            }
            set
            {
               _S.SetStateVariable("y", value);
            }
        }
        public System.String tcpServer
        {
            get
            {
               return((System.String)_S.GetStateVariable("tcpServer"));
            }
            set
            {
               _S.SetStateVariable("tcpServer", value);
            }
        }
        public System.String Evented_serial
        {
            get
            {
               return((System.String)_S.GetStateVariable("serial"));
            }
            set
            {
               _S.SetStateVariable("serial", value);
            }
        }
        public System.Int32 Evented_force
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("force"));
            }
            set
            {
               _S.SetStateVariable("force", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_page
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).Accumulator = value;
            }
        }
        public double ModerationDuration_page
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("page")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_x
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).Accumulator = value;
            }
        }
        public double ModerationDuration_x
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("x")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_y
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).Accumulator = value;
            }
        }
        public double ModerationDuration_y
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("y")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_tcpServer
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("tcpServer")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("tcpServer")).Accumulator = value;
            }
        }
        public double ModerationDuration_tcpServer
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("tcpServer")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("tcpServer")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_serial
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("serial")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("serial")).Accumulator = value;
            }
        }
        public double ModerationDuration_serial
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("serial")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("serial")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_force
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).Accumulator = value;
            }
        }
        public double ModerationDuration_force
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("force")).ModerationPeriod = value;
            }
        }
        public delegate void Delegate_getTcpServer(out System.String a);
        public delegate void Delegate_setForce(System.Int32 f);
        public delegate void Delegate_setPage(System.String p);
        public delegate void Delegate_setSerial(System.String s);
        public delegate void Delegate_setX(System.Int32 x);
        public delegate void Delegate_setY(System.Int32 y);

        public Delegate_getTcpServer External_getTcpServer = null;
        public Delegate_setForce External_setForce = null;
        public Delegate_setPage External_setPage = null;
        public Delegate_setSerial External_setSerial = null;
        public Delegate_setX External_setX = null;
        public Delegate_setY External_setY = null;

        public void RemoveStateVariable_page()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("page"));
        }
        public void RemoveStateVariable_x()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("x"));
        }
        public void RemoveStateVariable_y()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("y"));
        }
        public void RemoveStateVariable_tcpServer()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("tcpServer"));
        }
        public void RemoveStateVariable_serial()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("serial"));
        }
        public void RemoveStateVariable_force()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("force"));
        }
        public void RemoveAction_getTcpServer()
        {
             _S.GetUPnPService().RemoveMethod("getTcpServer");
        }
        public void RemoveAction_setForce()
        {
             _S.GetUPnPService().RemoveMethod("setForce");
        }
        public void RemoveAction_setPage()
        {
             _S.GetUPnPService().RemoveMethod("setPage");
        }
        public void RemoveAction_setSerial()
        {
             _S.GetUPnPService().RemoveMethod("setSerial");
        }
        public void RemoveAction_setX()
        {
             _S.GetUPnPService().RemoveMethod("setX");
        }
        public void RemoveAction_setY()
        {
             _S.GetUPnPService().RemoveMethod("setY");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _ImportedService
        {
            private ImportedService Outer = null;
            private UPnPService S;
            internal _ImportedService(ImportedService n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[6];
                RetVal[0] = new UPnPModeratedStateVariable("page", typeof(System.String), true);
                RetVal[0].AddAssociation("setPage", "p");
                RetVal[1] = new UPnPModeratedStateVariable("x", typeof(System.Int32), true);
                RetVal[1].AddAssociation("setX", "x");
                RetVal[2] = new UPnPModeratedStateVariable("y", typeof(System.Int32), true);
                RetVal[2].AddAssociation("setY", "y");
                RetVal[3] = new UPnPModeratedStateVariable("tcpServer", typeof(System.String), false);
                RetVal[3].AddAssociation("getTcpServer", "a");
                RetVal[4] = new UPnPModeratedStateVariable("serial", typeof(System.String), true);
                RetVal[4].AddAssociation("setSerial", "s");
                RetVal[5] = new UPnPModeratedStateVariable("force", typeof(System.Int32), true);
                RetVal[5].AddAssociation("setForce", "f");

                UPnPService S = new UPnPService(1, "", "urn:schemas-upnp-org:service::1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("getTcpServer");
                S.AddMethod("setForce");
                S.AddMethod("setPage");
                S.AddMethod("setSerial");
                S.AddMethod("setX");
                S.AddMethod("setY");
                return(S);
            }

            public void getTcpServer(out System.String a)
            {
                if(Outer.External_getTcpServer != null)
                {
                    Outer.External_getTcpServer(out a);
                }
                else
                {
                    Sink_getTcpServer(out a);
                }
            }
            public void setForce(System.Int32 f)
            {
                if(Outer.External_setForce != null)
                {
                    Outer.External_setForce(f);
                }
                else
                {
                    Sink_setForce(f);
                }
            }
            public void setPage(System.String p)
            {
                if(Outer.External_setPage != null)
                {
                    Outer.External_setPage(p);
                }
                else
                {
                    Sink_setPage(p);
                }
            }
            public void setSerial(System.String s)
            {
                if(Outer.External_setSerial != null)
                {
                    Outer.External_setSerial(s);
                }
                else
                {
                    Sink_setSerial(s);
                }
            }
            public void setX(System.Int32 x)
            {
                if(Outer.External_setX != null)
                {
                    Outer.External_setX(x);
                }
                else
                {
                    Sink_setX(x);
                }
            }
            public void setY(System.Int32 y)
            {
                if(Outer.External_setY != null)
                {
                    Outer.External_setY(y);
                }
                else
                {
                    Sink_setY(y);
                }
            }

            public Delegate_getTcpServer Sink_getTcpServer;
            public Delegate_setForce Sink_setForce;
            public Delegate_setPage Sink_setPage;
            public Delegate_setSerial Sink_setSerial;
            public Delegate_setX Sink_setX;
            public Delegate_setY Sink_setY;
        }
        public ImportedService()
        {
            _S = new _ImportedService(this);
            _S.GetUPnPService().GetStateVariableObject("page").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_page);
            _S.GetUPnPService().GetStateVariableObject("x").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_x);
            _S.GetUPnPService().GetStateVariableObject("y").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_y);
            _S.GetUPnPService().GetStateVariableObject("tcpServer").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_tcpServer);
            _S.GetUPnPService().GetStateVariableObject("serial").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_serial);
            _S.GetUPnPService().GetStateVariableObject("force").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_force);
            _S.Sink_getTcpServer = new Delegate_getTcpServer(getTcpServer);
            _S.Sink_setForce = new Delegate_setForce(setForce);
            _S.Sink_setPage = new Delegate_setPage(setPage);
            _S.Sink_setSerial = new Delegate_setSerial(setSerial);
            _S.Sink_setX = new Delegate_setX(setX);
            _S.Sink_setY = new Delegate_setY(setY);
        }
        public ImportedService(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_page(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_page != null) OnStateVariableModified_page(this);
        }
        private void OnModifiedSink_x(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_x != null) OnStateVariableModified_x(this);
        }
        private void OnModifiedSink_y(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_y != null) OnStateVariableModified_y(this);
        }
        private void OnModifiedSink_tcpServer(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_tcpServer != null) OnStateVariableModified_tcpServer(this);
        }
        private void OnModifiedSink_serial(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_serial != null) OnStateVariableModified_serial(this);
        }
        private void OnModifiedSink_force(UPnPStateVariable sender, object NewValue)
        {
            if(OnStateVariableModified_force != null) OnStateVariableModified_force(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: getTcpServer
        /// </summary>
        /// <param name="a">Associated State Variable: tcpServer</param>
        public void getTcpServer(out System.String a)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: setForce
        /// </summary>
        /// <param name="f">Associated State Variable: force</param>
        public void setForce(System.Int32 f)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: setPage
        /// </summary>
        /// <param name="p">Associated State Variable: page</param>
        public void setPage(System.String p)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: setSerial
        /// </summary>
        /// <param name="s">Associated State Variable: serial</param>
        public void setSerial(System.String s)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: setX
        /// </summary>
        /// <param name="x">Associated State Variable: x</param>
        public void setX(System.Int32 x)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: setY
        /// </summary>
        /// <param name="y">Associated State Variable: y</param>
        public void setY(System.Int32 y)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}